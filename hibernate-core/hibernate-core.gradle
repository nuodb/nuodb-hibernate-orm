/*
 * Hibernate, Relational Persistence for Idiomatic Java
 *
 * License: GNU Lesser General Public License (LGPL), version 2.1 or later.
 * See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.
 */
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'org.hibernate.build.xjc-jakarta'
}

description = 'Hibernate\'s core ORM functionality'

apply from: rootProject.file( 'gradle/published-java-module.gradle' )
apply plugin: 'org.hibernate.orm.antlr'
apply plugin: 'org.hibernate.matrix-test'

configurations {
    tests {
        description = 'Configuration for the produced test jar'
    }
}

// BEGIN: For NUODB - search local repo also
repositories {
	mavenCentral()
    mavenLocal()
}

// --------------------------------------------------------------------- //
// -               Control which tests are included or excluded        - //
// --------------------------------------------------------------------- //
test {
    filter {
        // ---------------------------------------------------------------------
        // Failing tests that need fixing
        // ---------------------------------------------------------------------

        // These work with NuoDB 7 - need to retest NuoDB 6.
    	// includeTestsMatching 'InsertOrderingWithSecondaryTable.testInheritanceWithSecondaryTable'
		// includeTestsMatching 'JpaCrossJoinTests.testCrossJoin'
    	// includeTestsMatching 'BulkManipulationTest.testInsertWithManyToOne'
        // includeTestsMatching 'BulkManipulationTest.testInsertWithSelectListUsingJoins'

		// includeTestsMatching 'JoinedInheritanceWithOneToManyTest.test'
		// includeTestsMatching 'JoinedSubclassTest.testJoinedSubclass'
		// includeTestsMatching 'JpaCrossJoinBaselineTests.testCrossJoin'
		// includeTestsMatching 'LazyOneToOneRemoveFlushAccessTest.initializationError'
		// includeTestsMatching 'LazyOneToOneRemoveFlushAccessTest.initializationError'
		// includeTestsMatching 'LockTest.testContendedPessimisticLock'
		// includeTestsMatching 'MappedSuperclassWithGenericsTest.initializationError'

		// includeTestsMatching 'OneToOneOwnerByContainedEagerCyclesTest.initializationError'
		// includeTestsMatching 'OptimisticAndPessimisticLockTest'
		// includeTestsMatching 'OptimisticLockTest.test'
		// includeTestsMatching 'PolymorphicQueriesWithJoinTest.testSelectWithWhereClause'
		// includeTestsMatching 'QueryTimeOutTest.testCreateQuerySetTimeout'
		// includeTestsMatching 'QueryTimeOutTest.testCreateQuerySetTimeoutHint'
		// includeTestsMatching 'RepeatableReadTest.testStaleVersionedInstanceFoundOnLock'
		// includeTestsMatching 'ResultTransformerTest.testResultTransformerIsAppliedToScrollableResults'

        // Undefined reference to DESCRIPTION
        excludeTestsMatching 'org.hibernate.orm.test.hql.BulkManipulationTest'

        // Illegal null in column HIB_SESS_ID - note these are in 2 different packages
		excludeTestsMatching 'InsertSelectTests.simpleTest'
		excludeTestsMatching 'InsertSelectTests.testInsertSelectDistinct'
		excludeTestsMatching 'InsertSelectTests.testInsertSelectGroupBy'

		excludeTestsMatching 'CteTests.testInSubquery' // Returns more than one row
		excludeTestsMatching 'CteTests.testSubquery'  // emulation -> unsupported SQL construct
		excludeTestsMatching 'CriteriaQualifiedJoinTest.testJoinLateral'   // emulation -> unsupported SQL construct
		excludeTestsMatching 'HQLTest.test_hql_derived_join_example'  // emulation -> unsupported SQL construct -> on 1 and exists(...)
        excludeTestsMatching 'org.hibernate.orm.test.query.SubQueryInFrom*'  // Predicate 1 is not a boolean operation

        excludeTestsMatching 'FetchClausePaginationTest.testFetchWithTies'
        excludeTestsMatching 'WindowFunctionTest.testFrame'
        excludeTestsMatching 'WindowFunctionTest.testRowNumberWithoutOrder'

		//includeTestsMatching 'WindowFunctionTest.testOrderByAndAlias'
		//includeTestsMatching 'WindowFunctionTest.testRank'

        // Sub-select alias with parameters "(SELECT ...) alias(a, b)" not supported: FIXED
		// includeTestsMatching 'CountQueryTests.testDistinctDynamicInstantiation'
		// includeTestsMatching 'CountQueryTests.testForHHH18850'
		// includeTestsMatching 'CountQueryTests.testJoinedEntityPath'
		// includeTestsMatching 'CountQueryTests.testUnionQuery'
   	    // includeTestsMatching 'CountTest.testCount'
		// includeTestsMatching 'CteTests.testBasic'
		// includeTestsMatching 'CteTests.testBasicJoined'
		// includeTestsMatching 'CteTests.testMaterialized'
		// includeTestsMatching 'CteTests.testNested'
		// includeTestsMatching 'CriteriaCteOffsetFetchTest.testMainQueryFetch'
		// includeTestsMatching 'CriteriaCteOffsetFetchTest.testMainQueryOffset'
		// includeTestsMatching 'CriteriaCteOffsetFetchTest.testMainQueryOffsetAndFetch'
		// includeTestsMatching 'CriteriaCteOffsetFetchTest.testSetFirstAndMaxResults'
		// includeTestsMatching 'CriteriaCteOffsetFetchTest.testSetFirstResult'
		// includeTestsMatching 'CriteriaCteOffsetFetchTest.testSetMaxResults'
		// includeTestsMatching 'CriteriaCteUnionTest.testSimpleCte'
		// includeTestsMatching 'CriteriaCteUnionTest.testUnionCte'
		// includeTestsMatching 'CriteriaMultiselectGroupByAndOrderByTest.testSubqueryGroupBy'
		// includeTestsMatching 'CriteriaMultiselectGroupByAndOrderByTest.testSubqueryGroupByAndOrderBy'
		// includeTestsMatching 'CriteriaMultiselectGroupByAndOrderByTest.testSubqueryGroupByAndOrderByAndHaving'
		// includeTestsMatching 'ExpressionsTest.testSumWithSubqueryPath'
		// includeTestsMatching 'FunctionsWithAnonymousTupleTest'
		// includeTestsMatching 'HQLTest.test_hql_cte_materialized_example'
        // includeTestsMatching 'HQLTest.test_hql_derived_root_example' 
		// includeTestsMatching 'InSubqueryPredicateAnonymousTupleTest.testSimpleInSubqueryPredicate'
		// includeTestsMatching 'InSubqueryPredicateAnonymousTupleTest.testTupleInSubqueryPredicate'
		// includeTestsMatching 'NestedSubqueryTest.testNestedHqlSubQueries'
		// includeTestsMatching 'NestedSubqueryTest.testNestedHqlSubQueries2'
		// includeTestsMatching 'OrderByExpressionNotInSelectTest.testSubquery'
		// includeTestsMatching 'SubqueryTests.testNoFromClauseInSubquery'
		// includeTestsMatching 'UnionOfPartitionResultsTest.testSubquery'
		// includeTestsMatching 'UnionOfPartitionResultsTest.testSubqueryWithUnion'
		// includeTestsMatching 'UnionOfPartitionResultsTest.testUnionOfPartitionResults'

        // JOIN in UPDATE gets lost: FIXED
		// includeTestsMatching 'IsNullAndMappedByTest.testHqlUpdate'
        // includeTestsMatching 'IsNullAndNotFoundTest.testHqlUpdate'
		// includeTestsMatching 'MutationQueriesAndNotFoundActionTest.testUpdate'
		// includeTestsMatching 'MutationQueriesAndNotFoundActionTest.testUpdateWithImplicitJoin'
		// includeTestsMatching 'UpdateJoinTests.testUpdateWithJoin'
		// includeTestsMatching 'UpdateJoinTests.testUpdateWithJoinCriteria'

        // WARNING: Failing tests from this class leak connections and exhaust the pool, so all subsequent tests fail
        excludeTestsMatching 'org.hibernate.orm.test.hql.ASTParserLoadingTest.testEJBQLFunctions' // Cannot compare INTEGER to OBJECT?

        // These work when invoked manually, but not as part of test suite
        // includeTestsMatching 'DynamicFilterTest'
        // includeTestsMatching 'org.hibernate.orm.test.annotations.SecuredBindingTest.testConfigurationMethods'
        // includeTestsMatching 'org.hibernate.orm.test.bootstrap.jpa.PersistenceUnitInfoTests.class'
        // includeTestsMatching 'org.hibernate.orm.test.bootstrap.jpa.PersistenceUnitOverridesTests.testIntegrationOverridesOfPersistenceXmlDataSource'
        // includeTestsMatching 'org.hibernate.orm.test.bootstrap.jpa.PersistenceUnitOverridesTests.testPassingIntegrationJpaDataSourceOverrideForJtaDataSourceElement'
        // includeTestsMatching 'org.hibernate.orm.test.bootstrap.jpa.PersistenceUnitOverridesTests.testPassingIntegrationJtaDataSourceOverrideForJpaJdbcSettings'
        // includeTestsMatching 'org.hibernate.orm.test.multitenancy.ConfigurationValidationTest.testReleaseMode'

        // includeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testAggregateIndicesElementsWithPath'
        // includeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testColumnFunction'
    	excludeTestsMatching 'FollowOnLockingTest.testQueryLockingWithFollowOn'
    	excludeTestsMatching 'FollowOnLockingTest.testQueryLockingWithoutFollowOn'

        // Tests explicity look for CROSS JOIN in SQL, but work otherwise
		excludeTestsMatching 'JpaCrossJoinTests.test2Roots'
		excludeTestsMatching 'JpaCrossJoinTests.test2Roots2'

        // These all fail, not sure why yet
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.**ArrayTest.class'
        excludeTestsMatching 'org.hibernate.orm.test.type.EnumSetTest.class'

		excludeTestsMatching 'SQLExceptionConversionTest.testIntegrityViolation'  // No integrity checking in NuoDB

        // Returned no results, 1 expected
		excludeTestsMatching 'CriteriaMultiselectGroupByAndOrderByTest.testCriteriaGroupByAndOrderByAndHaving'

        // Missing table
        excludeTestsMatching 'TypeParameterTest.testLoading'
		excludeTestsMatching 'TypeParameterTest.testSave'

        // Contraint errors
        excludeTestsMatching 'UniqueConstraintDropTest.testUniqueConstraintIsDropped'  // not dropped
		excludeTestsMatching 'SchemaUpdateTest.testSchemaUpdateAndValidation' // Our contraint names are case sensitive

        // Problem with atan2?
        excludeTestsMatching 'CriteriaBuilderNonStandardFunctionsTest.testAtan2'

        // Test works, but clean up generates invalid SQL
        excludeTestsMatching 'ASTParserLoadingTest.testCollectionFetchWithDistinctionAndLimit'

        // Not sure what this should be showing
        excludeTestsMatching 'CriteriaLiteralWithSingleQuoteTest.testLiteralProjectionAndGroupBy'

        // Timezones and timestamps. Several of these time tests are only out by a millisecond!
        excludeTestsMatching 'org.hibernate.orm.test.type.LocalDateTest.*'
        excludeTestsMatching 'org.hibernate.orm.test.timezones.*'
        excludeTestsMatching 'org.hibernate.orm.test.timestamp.*'
        excludeTestsMatching 'org.hibernate.orm.test.temporal.*'
        excludeTestsMatching 'org.hibernate.orm.test.mapping.javatime.*.testLocal.*.'
		excludeTestsMatching 'GlobalJavaTimeJdbcTypeTests.testLocalDate'
		excludeTestsMatching 'GlobalJavaTimeJdbcTypeTests.testLocalDateTime'
		excludeTestsMatching 'GlobalJavaTimeJdbcTypeTests.testLocalTime'
		excludeTestsMatching 'JavaTimeJdbcTypeTests.testLocalDate'
		excludeTestsMatching 'JavaTimeJdbcTypeTests.testLocalDateTime'
		excludeTestsMatching 'JavaTimeJdbcTypeTests.testLocalTime'

        // Test breaks Hibernate's SQL generator
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.set.SetOperationTest.testAlternatingSetOperator' // No such element exception

        // Sequence failing
        excludeTestsMatching 'org.hibernate.orm.test.secondarytable.*' 
        excludeTestsMatching 'org.hibernate.orm.test.id.enhanced.*'
        excludeTestsMatching 'org.hibernate.orm.test.id.sequence.*'
        excludeTestsMatching 'org.hibernate.orm.test.schemaupdate.idgenerator.SequenceGeneratorIncrementTest.*'
        excludeTestsMatching 'org.hibernate.orm.test.batch.BatchSelectAndForceIncrementVersionTest.testBatchOptimisticForceIncrement'
        excludeTestsMatching 'org.hibernate.orm.test.batch.BatchSelectAndForceIncrementVersionTest.testBatchPessimisticForceIncrement'
		excludeTestsMatching 'SequenceInformationTest.test'
		excludeTestsMatching 'SequenceGeneratorTest.testStartOfSequence'
		excludeTestsMatching 'SequenceMismatchStrategyFixWithSequenceGeneratorTest.test'
		//includeTestsMatching 'SequenceMismatchStrategyDefaultExceptionTest.test'
		//includeTestsMatching 'SequenceMismatchStrategyExceptionEnumTest.test'
		//includeTestsMatching 'SequenceMismatchStrategyLogTest.test'

        // Empty row and over clauses in 
		excludeTestsMatching 'CriteriaTimeoutTest.testCreateMutationQueryCriteriaInsertSelect'

        // NULL pointer error
		excludeTestsMatching 'CriteriaWindowFunctionTest'

        // Batch update returns 1 row instead of 0
        excludeTestsMatching 'org.hibernate.orm.test.batch.BatchOptimisticLockingTest.testBatchAndOptimisticLocking '

        excludeTestsMatching 'org.hibernate.orm.test.bootstrap.scanning.PackagedEntityManagerTest' // Can't find persistence.xml files
        excludeTestsMatching 'org.hibernate.orm.test.bootstrap.scanning.ScannerTest' // Can't find orm.xml files

        //excludeTestsMatching 'org.hibernate.orm.test.filter.DynamicFilterTest.testFiltersOnMultiTableHqlDelete' // Undefined reference in DELETE
        //excludeTestsMatching 'org.hibernate.orm.test.filter.DynamicFilterTest.testFiltersOnSimpleHqlDelete' // Undefined reference in DELETE

        excludeTestsMatching 'org.hibernate.orm.test.filter.FilterParameterTests'  // Four tests don't throw expected exception, the other 10 pass

        // Contrived LIKE patterns fail (3 tests)
        excludeTestsMatching 'LikeEscapeDefaultTest'

        // sign() function in @Formaula annotation is used as-is - the registered emulation is ignored
        excludeTestsMatching 'FormulaWithPartitionByTest'

        if (nuodbDatabaseVersion < 7) {
            // FULL OUTER JOIN not supported until NuoDB 7
            excludeTestsMatching 'EntityJoinWithJoinedInheritanceTest.testFullJoin'
            excludeTestsMatching 'EntityJoinWithSingleTableInheritanceTest.testFullJoin'
            excludeTestsMatching 'EntityJoinWithTablePerClassInheritanceTest.testFullJoin'
            excludeTestsMatching 'org.hibernate.orm.test.join.OuterJoinTest.testJoinOrderWithFullJoinWithIdDereference'
            excludeTestsMatching 'org.hibernate.orm.test.join.OuterJoinTest.testJoinOrderWithFullNormalJoin'
            excludeTestsMatching 'org.hibernate.orm.test.join.OuterJoinTest.testJoinOrderWithFullNormalJoinWithIdDereference'

            excludeTestsMatching 'org.hibernate.orm.test.inheritance.join.AttributeJoinWith*.testFullJoin'
            excludeTestsMatching 'org.hibernate.orm.test.query.RightJoinNullnessPredicateQueryTest.testDereferenceIsNull'
            excludeTestsMatching 'org.hibernate.orm.test.query.RightJoinNullnessPredicateQueryTest.testFullJoinIsNull'
            excludeTestsMatching 'org.hibernate.orm.test.query.SelectForeignKeyWithMissingFromTest.testFullJoin'
            excludeTestsMatching 'org.hibernate.orm.test.query.SelectForeignKeyWithMissingFromTest.testFullJoinEntityPath'

            // Not until NuoDB 7 for var_samp et al
            excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testStatisticalFunctions'
            excludeTestsMatching 'org.hibernate.orm.test.hql.HQLTest.test_var_function_example'
        }

        // --------------------------------------------
        // Tests to skip due to known NuoDB limitations
        // --------------------------------------------

        // CASCADE DELETE not supported
        excludeTestsMatching 'ManyToManyBidirectionalTest.testRemoveMappedBySide'
    	excludeTestsMatching 'ToOneOnDeleteTest.testManyToOne'

        // Dependent Right Outer Join not supported even in 7
        excludeTestsMatching 'org.hibernate.orm.test.join.OuterJoinTest.testJoinOrderWithRightJoinWithInnerImplicitJoins'
        //excludeTestsMatching 'org.hibernate.orm.test.join.OuterJoinTest.testJoinOrderWithFullJoin'

        // No support for UPDATE ... ON CONFLICT
        excludeTestsMatching 'InsertConflictTests'
	
        // Type implementation mismatches
        excludeTestsMatching 'org.hibernate.orm.test.jpa.query.NativeQueryResultTypeAutoDiscoveryTest.tinyintType'  // No support for the tinyint datatype so we use smallint
        excludeTestsMatching 'org.hibernate.orm.test.jpa.query.NativeQueryResultTypeAutoDiscoveryTest.floatType'  // Stores all floating point numbers as double, never returns a float
        excludeTestsMatching 'org.hibernate.orm.test.jpa.query.NativeQueryResultTypeAutoDiscoveryTest.realType'  // Stores all floating point numbers as double, never returns a float
        excludeTestsMatching 'org.hibernate.orm.test.jpa.query.NativeQueryResultTypeAutoDiscoveryTest.numericType'  // Value is too big for the maximum allowed precision of NuoDB
        excludeTestsMatching 'org.hibernate.orm.test.jpa.query.NativeQueryResultTypeAutoDiscoveryTest.decimalType'  // Value is too big for the maximum allowed precision of NuoDB
        excludeTestsMatching 'org.hibernate.orm.test.jpa.query.NativeQueryResultTypeAutoDiscoveryTest.binaryTypes'  // NuoDB maps BINARY and VARBINARY to BLOB
        excludeTestsMatching 'org.hibernate.orm.test.jpa.query.NativeQueryResultTypeAutoDiscoveryTest.longBinaryType'  // NuoDB maps LONGVARCHAR to BLOB

        // JIRA DB-40458: CASE statement weridness cast(? AS VARCHAR (2147483647))
		excludeTestsMatching 'CaseStatementTest.testSearchedCaseStatementWithAllParamResults'

        // JIRA DB-40465: Can't create table with HELPER_TYPE column
		excludeTestsMatching 'IdClassPredicateTest.testCountIdClassAttributes'
		excludeTestsMatching 'IdClassPredicateTest.testDeclaredIdClassAttributes'
		excludeTestsMatching 'IdClassPredicateTest.testSupertypeIdClassAttributes'

        // JIRA DB-37128: NuoDB Byte cannot be set to a negative value using a PreparedStatement
        excludeTestsMatching 'ByteTest.testByteDataPersistenceAndRetrieval'

        // NuoDB does not use Catalogs
        excludeTestsMatching 'org.hibernate.orm.test.boot.database.qualfiedTableNaming.DefaultCatalogAndSchemaTest'

        // NuoDB does not take read locks
        excludeTestsMatching 'LockTest.testUpdateWithPessimisticReadLockSkipLocked'  

        // Functions or behaviours NuoDB doesn't support
        excludeTestsMatching 'NamedQueryCommentTest' // our query hints go after select/update not before
		excludeTestsMatching 'NullPrecedenceTest.testNullPrecedence'  // NuoDB does not support NULL precedence

        excludeTestsMatching 'org.hibernate.orm.test.query.criteria.CriteriaBuilderNonStandardFunctionsTest.testLog' // LOG() not supported
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.StandardFunctionTests.testLog' // ln() not implemented
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.StandardFunctionTests.testMathFunctions' // ln() not implemented

        excludeTestsMatching 'org.hibernate.orm.test.query.hql.StandardFunctionTests.testExtractFunction' // WEEK not implemented
		excludeTestsMatching 'StandardFunctionTests.testExtractFunctionWithAssertions' // WEEK not implemented
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testExtractFunctionWeek'  // WEEK not implemented

        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testCastBinaryWithLength'  // NuoDB doesn't automatically truncate
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testCastFunction' // NuoDB doesn't automatically truncate. No result found for query [select cast(e.theBoolean as String) from EntityOfBasics e] 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testAddSecondsWithFractionalPart' // Loses fractional part

        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testCastStringToBoolean' // SELECT ... UNION  SELECT  wihtout FROM not supported 
                                       // select (select v.x from (select true x ^union all select false) v left join (select 't' k,true v union all select 'true',true union all select 'y',true union all select '1',true union all select 'f',false union all select 'false',false union all select 'n',false union all select '0',false) t on lower('1')=t.k where t.v is null or v.x=t.v) FROM Dual 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testColumnFunction' // Expected: <the string> but was: <null> 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testDateTruncWithOffsetFunction' // Expected: one of {<1974-10-03T00:00-12:00>, <1974-10-04T00:00Z>} but: was <1974-10-03T23:00Z> 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testDurationArithmeticWithLiterals' // Expected: <PT120H> but was: <null> 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testDurationSubtractionWithDatetimeLiterals' // Expected: <PT840H> but was: <null> 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testImplicitCollectionJoinInSelects' // Expected: (a collection containing <0> and a collection containing <1>)  but: a collection containing <0> 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testMaxGreatest' // Expected: <10> but was: <null> 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testTupleInSubqueryResult' // Expected: <[true]> but was: <[false]> 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testAggregateIndexElementKeyValueWithAlias' // No result found for query [select max(index(l)) from EntityOfLists eol join eol.listOfNumbers l group by eol] 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testAggregateIndicesElementsWithPath' // NoReult No result found for query [select max(indices(eol.listOfNumbers)) from EntityOfLists eol] 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testDurationArithmeticOverflowing'  // Numeric overflow
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testDurationBy' // No result found for query [select e.theDuration from EntityOfBasics e] 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testDurationCast' //  No result found for query [select cast(e.theDuration as Long) from EntityOfBasics e] 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testDurationLiterals' //  No result found for query [select e.theDuration from EntityOfBasics e] 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testExtractFunctionTimeZone' // SQLGrammar exception unexpected timezone_hour
                                       // select extract(^timezone_hour from eob1_0.the_zoned_date_time) from EntityOfBasics eob1_0 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testExtractFunctionWithAssertions' // IndexOutOfBounds Index 0 out of bounds for length 0 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testExtractOffsetHourMinute' //SQLGrammar JDBC exception
                                       // select extract(^timezone_hour from {ts '2024-02-05 09:18:12.000000000'}) FROM Dual 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testGroupByGroupingSets' // SQLGrammar JDBC exception executing SQL [select avg(eob1_0.the_double),eob1_0.gender,eob1_0.the_int from EntityOfBasics eob1_0 group by cube(eob1_0.gender,eob1_0.the_int)] [can't find function "CUBE"] [n/a] 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testGroupByRollup' //SQLGrammar JDBC exception executing SQL [select avg(eob1_0.the_double),eob1_0.gender,eob1_0.the_int from EntityOfBasics eob1_0 group by rollup(eob1_0.gender,eob1_0.the_int)] [can't find function "ROLLUP"] [n/a] 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testHyperbolic' // No result found for query [select sinh(e.theDouble) from EntityOfBasics e] 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testImplicitCollectionJoinInSelectAggregate' // No result found for query [select max(index(eol.listOfNumbers)) from EntityOfLists eol group by eol] 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testImplicitCollectionJoinInWhere' // No result found for query [from EntityOfLists eol join eol.listOfOneToMany se where element(se).someLong=5] 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testKeyIndexValueEntry' // No result found for query [select index(l) from EntityOfLists eol join eol.listOfBasics l] 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testMathFunctions' // SQLGrammar exception executing SQL [select power(2.71828182845904523536028747135266249775724709369995E0,eob1_0.the_double),ln((eob1_0.the_double+1)),log(10,(eob1_0.the_double+2)) from EntityOfBasics eob1_0] [can't find function "LN"] [n/a] 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testMaxOverUnion' // SQLGrammar exception, expected end of statement got parenthesis
                                       // select max(derived1_0.val) from (select se1_0.someLong from SIMPLE_ENTITY se1_0 union select se2_0.someInteger from SIMPLE_ENTITY se2_0) derived1_0^(val) 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testMaxindexMaxelement' // NoResult No result found for query [select maxindex(eol.listOfBasics) from EntityOfLists eol] 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testMedian'  // median() not supported
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testMoreIntervalDiffExpressions' // GenericJDBC JDBC exception executing SQL [select (DATE_ADD(CURRENT_TIMESTAMP, INTERVAL round(-(1000 * DATEDIFF(MICROSECOND /* No native using MICROSECOND*1000 */, {ts '1990-01-01 12:30:00.000000000'}, CURRENT_TIMESTAMP))/1000) MICROSECOND /* native unsupported */)) FROM Dual] [Too big interval -1113990001941297] [Too big interval -1113990001941297] 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testOverlayFunction' // IndexOutOfBounds Index 0 out of bounds for length 0 

        excludeTestsMatching 'org.hibernate.orm.test.hql.HQLTest.test_hql_collection_expressions_example_5' // any(sub-query) not supported
		excludeTestsMatching 'SubqueryOperatorsTest.testAny' // any(sub-query) not supported

        excludeTestsMatching 'test_hql_cte_materialized_example' // WITH (a, b) is illegal syntax

        // IS [NOT] DISTINCT FROM not supported
        excludeTestsMatching 'org.hibernate.orm.test.bootstrap.binding.annotations.embedded.EmbeddedTest.testQueryWithEmbeddedParameterOneNull'
        excludeTestsMatching 'org.hibernate.orm.test.bootstrap.binding.annotations.embedded.EmbeddedTest.testQueryWithEmbeddedParameterAllNull' 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.DistinctFromTest.testNotDistinctFromNullParam'
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.DistinctFromTest.testNotDistinctFromStringParam'
        excludeTestsMatching 'org.hibernate.orm.test.type.VarbinaryArrayTest'
        excludeTestsMatching 'org.hibernate.orm.test.type.BasicListTest.testQuery'
        excludeTestsMatching 'org.hibernate.orm.test.type.BasicSortedSetTest.testQuery'
        excludeTestsMatching 'org.hibernate.orm.test.type.BooleanArrayTest.testQuery'
        excludeTestsMatching 'org.hibernate.orm.test.type.DateArrayTest.testQuery'
        excludeTestsMatching 'org.hibernate.orm.test.type.DoubleArrayTest.testQuery'
        excludeTestsMatching 'org.hibernate.orm.test.type.EnumArrayTest.testQuery'
        excludeTestsMatching 'org.hibernate.orm.test.type.EnumSetConverterTest.testQuery'
        excludeTestsMatching 'org.hibernate.orm.test.type.EnumSetTest.testQuery'
        excludeTestsMatching 'org.hibernate.orm.test.type.FloatArrayTest.testQuery'
        excludeTestsMatching 'org.hibernate.orm.test.type.IntegerArrayTest.testQuery'
        excludeTestsMatching 'org.hibernate.orm.test.type.LongArrayTest.testQuery'
        excludeTestsMatching 'org.hibernate.orm.test.type.ShortArrayTest.testQuery'
        excludeTestsMatching 'org.hibernate.orm.test.type.TimeArrayTest.testQuery'
        excludeTestsMatching 'org.hibernate.orm.test.type.TimestampArrayTest.testQuery'
		excludeTestsMatching 'org.hibernate.orm.test.query.hql.DistinctFromTest'

        // Subqueries in ORDER BY clause
        excludeTestsMatching 'org.hibernate.orm.test.hql.size.filter.WhereAnnotatedOneToManySizeTest.orderBy_sizeOf'
        excludeTestsMatching 'org.hibernate.orm.test.hql.size.filter.WhereAnnotatedOneToManySizeTest.orderBy_sizeOf'
		excludeTestsMatching 'SubqueryOperatorsTest.testSubqueryInVariousClauses'

        // Multi-column value only allowed in comparison operators
        // includeTestsMatching 'org.hibernate.orm.test.annotations.onetomany.OrderByTest.testOrderByOnIdClassProperties'
        // includeTestsMatching 'org.hibernate.orm.test.annotations.onetomany.OneToManyTest.testJoinColumns'
        // includeTestsMatching 'org.hibernate.orm.test.annotations.onetoone.OneToOneTest.testCompositePk'
        // includeTestsMatching 'org.hibernate.orm.test.annotations.derivedidentities.bidirectional.CompositeIdDerivedIdWithIdClassTest'

        // NuoDB supports sequences, but not pooled sequences, as Hibernate uses them
        excludeTestsMatching 'org.hibernate.orm.test.id.enhanced.SequenceNamingStrategyTest'
        excludeTestsMatching 'org.hibernate.orm.test.id.sequence.SequenceExportTest.class'
        excludeTestsMatching 'org.hibernate.orm.test.schemaupdate.idbag.IdBagSequenceTest'

        // JIRA DB-38187 CASE result not matched by IN clause
        excludeTestsMatching 'org.hibernate.orm.test.jpa.ql.TreatKeywordTest.testFilteringJoinedSubclasses'
        excludeTestsMatching 'org.hibernate.orm.test.hql.HQLTest.test_hql_in_predicate_example_1' // CASE ... END IN (...) not supported

        // ResultSet is forward-only
        excludeTestsMatching 'org.hibernate.orm.test.jpa.criteria.fetchscroll.CriteriaToScrollableResultsFetchTest.testWithScroll '
        excludeTestsMatching 'org.hibernate.orm.test.hql.ScrollableCollectionFetchingTest.testScrollingJoinFetchesEmptyResultSet'
        excludeTestsMatching 'org.hibernate.orm.test.hql.ScrollableCollectionFetchingTest.testScrollingJoinFetchesPositioning'
        excludeTestsMatching 'org.hibernate.orm.test.hql.ScrollableCollectionFetchingTest.testScrollingJoinFetchesReverse'
        excludeTestsMatching 'org.hibernate.orm.test.hql.ScrollableCollectionFetchingTest.testScrollingJoinFetchesSingleRowResultSet'
        excludeTestsMatching 'org.hibernate.orm.test.jpa.criteria.fetchscroll.CriteriaToScrollableResultsFetchTest.testWithScroll'
        excludeTestsMatching 'org.hibernate.orm.test.resulttransformer.ResultTransformerTest'

        // Scrollable ResultSets not supported
        excludeTestsMatching 'org.hibernate.orm.test.query.sqm.BasicSelectionQueryTests.rawEntitySelectTest'
        excludeTestsMatching 'org.hibernate.orm.test.query.sqm.BasicSelectionQueryTests.rawNamedSelectTest'
        excludeTestsMatching 'org.hibernate.orm.test.query.sqm.BasicSelectionQueryTests.rawScalarSelectTest'
        excludeTestsMatching 'org.hibernate.orm.test.query.sqm.BasicSelectionQueryTests.tupleSelectionTest'
        excludeTestsMatching 'org.hibernate.orm.test.query.sqm.BasicSelectionQueryTests.tupleSelectionTestBaseline'
        excludeTestsMatching 'org.hibernate.orm.test.query.sqm.BasicSelectionQueryTests.typedEntitySelectTest'
        excludeTestsMatching 'org.hibernate.orm.test.query.sqm.BasicSelectionQueryTests.typedScalarSelectTest'
        excludeTestsMatching 'org.hibernate.orm.test.query.sqm.BasicSelectionQueryTests.typesNamedSelectTest'
        excludeTestsMatching 'org.hibernate.orm.test.query.returns.ScrollableResultsTests'

        // CREATE TABLE ... COMMENT not supported, nor is COMMENT ON
        excludeTestsMatching 'org.hibernate.orm.test.schemaupdate.TableCommentTest'

        // Can't get previous value from a sequence
        excludeTestsMatching 'org.hibernate.orm.test.id.SequenceStyleGeneratorBehavesLikeSequeceHiloGeneratorWitZeroIncrementSizeTest'

        // ALL not supported
        excludeTestsMatching 'org.hibernate.orm.test.hql.HQLTest.test_hql_collection_expressions_example_8'
        excludeTestsMatching 'org.hibernate.orm.test.hql.HQLTest.test_hql_all_subquery_comparison_qualifier_example'
		excludeTestsMatching 'SubQueryTests.modifiedSubQueryHqlTest'
		excludeTestsMatching 'SubQueryTests.modifiedSubQueryTest'
        excludeTestsMatching 'org.hibernate.orm.test.jpa.criteria.subquery.UncorrelatedSubqueryTest.testEqualAll'
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.SubqueryOperatorsTest.testEvery'
    }
}
// END: For NUODB

dependencies {
    api jakartaLibs.jpa
    api jakartaLibs.jta

    implementation libs.hcann
    implementation libs.jandex
    implementation libs.classmate
    implementation libs.byteBuddy

    implementation jakartaLibs.jaxbApi
    implementation jakartaLibs.jaxb
    implementation jakartaLibs.inject

    implementation libs.antlrRuntime

    compileOnly jakartaLibs.jacc
    compileOnly jakartaLibs.validation
    compileOnly jakartaLibs.cdi
    compileOnly jakartaLibs.jsonbApi
    compileOnly libs.jackson
    compileOnly libs.jacksonXml
    compileOnly dbLibs.postgresql

    testImplementation project(':hibernate-testing')
    testImplementation project(':hibernate-ant')
    testImplementation testLibs.shrinkwrapApi
    testImplementation testLibs.shrinkwrap
    testImplementation testLibs.shrinkwrapDescriptors
    testImplementation testLibs.shrinkwrapDescriptorsApi
    testImplementation jakartaLibs.cdi
    testImplementation jakartaLibs.jacc
    testImplementation jakartaLibs.validation
    testImplementation jakartaLibs.el
    testImplementation( libs.validator ) {
        // for test runtime
        transitive = true
    }
    testImplementation "joda-time:joda-time:2.3"
    testImplementation dbLibs.h2

    testRuntimeOnly libs.byteBuddy
    testRuntimeOnly testLibs.weld
    testRuntimeOnly testLibs.wildFlyTxnClient
    testImplementation jakartaLibs.jsonb
    testImplementation libs.jackson
    testRuntimeOnly libs.jacksonXml
    testRuntimeOnly libs.jacksonJsr310

    testAnnotationProcessor project( ':hibernate-jpamodelgen' )

    // NOTE: it seems like, since 4.10, the Antlr Tool no longer defines
    // transitive dep on the corresponding Antlr Runtime.  At least, I get
    // errors about mismatched versions if I do not include the runtime
    // dependency here.
    antlr libs.antlr
    antlr libs.antlrRuntime

    xjc jakartaLibs.xjc
    xjc jakartaLibs.jaxb
    xjc rootProject.fileTree(dir: 'patched-libs/jaxb2-basics', include: '*.jar')
}

jar {
    manifest {
        attributes(
                'Main-Class': 'org.hibernate.Version'
        )
    }
}

ext {
    jaxbTargetDir = project.file( "${buildDir}/generated/sources/xjc/main" )
}

sourceSets {
    test {
        resources {
            srcDir 'src/test/resources'
            srcDir 'src/test/bundles'
        }
    }
}

xjc {
    outputDirectory = project.jaxbTargetDir

    schemas {
        cfg {
            xsdFile = 'src/main/resources/org/hibernate/xsd/cfg/legacy-configuration-4.0.xsd'
            xjcBindingFile = 'src/main/xjb/hbm-configuration-bindings.xjb'
        }
        hbm {
            xsdFile = file( 'src/main/resources/org/hibernate/xsd/mapping/legacy-mapping-4.0.xsd' )
            xjcBindingFile = file( 'src/main/xjb/hbm-mapping-bindings.xjb' )
            xjcExtensions += ['inheritance', 'simplify']
        }
        mapping {
            xsdFile = file( 'src/main/resources/org/hibernate/xsd/mapping/mapping-3.1.0.xsd' )
            xjcBindingFile = file( 'src/main/xjb/mapping-bindings.xjb' )
            xjcExtensions += ['inheritance', 'simplify']
        }
    }
}

task copyBundleResourcesXml (type: Copy) {
    System.out.println("hibernate-core: Using a " + db + " database")
    inputs.property( "db", db )
    inputs.property( "dbHost", dbHost )
    ext {
        bundlesTargetDir = file( "${buildDir}/bundles" )
        // Escape
        bundleTokens = [
                'db.dialect' : dbBundle[db]['db.dialect'].replace("&", "&amp;"),
                'jdbc.driver' : dbBundle[db]['jdbc.driver'].replace("&", "&amp;"),
                'jdbc.user' : dbBundle[db]['jdbc.user'].replace("&", "&amp;"),
                'jdbc.pass' : dbBundle[db]['jdbc.pass'].replace("&", "&amp;"),
                'jdbc.url' : dbBundle[db]['jdbc.url'].replace("&", "&amp;"),
                'jdbc.datasource' : dbBundle[db]['jdbc.datasource'].replace("&", "&amp;"),
                'connection.init_sql' : dbBundle[db]['connection.init_sql'].replace("&", "&amp;")
        ]
        ext.bundleTokens['buildDirName'] = project.relativePath( buildDir )
    }

    from('src/test/bundles/templates') {
        include '**/*.xml'
    }
    into ext.bundlesTargetDir
    filter( ReplaceTokens, tokens: ext.bundleTokens)

    doFirst {
        ext.bundlesTargetDir.mkdirs()
    }
}

task copyBundleResourcesNonXml (type: Copy) {
    inputs.property( "db", db )
    ext {
        bundlesTargetDir = file( "${buildDir}/bundles" )
        // Escape
        bundleTokens = dbBundle[db]
        ext.bundleTokens['buildDirName'] = project.relativePath( buildDir )
    }

    from('src/test/bundles/templates') {
        exclude '**/*.xml'
    }
    into ext.bundlesTargetDir
    filter( ReplaceTokens, tokens: ext.bundleTokens)

    doFirst {
        ext.bundlesTargetDir.mkdirs()
    }
}

task copyBundleResources (type: Copy) {
    inputs.property( "db", db )
    dependsOn tasks.copyBundleResourcesXml
    dependsOn tasks.copyBundleResourcesNonXml
}

processTestResources {
    dependsOn copyBundleResources
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

sourcesJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task testJar(type: Jar, dependsOn: testClasses) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveClassifier.set( 'test' )
    from sourceSets.test.output
}

artifacts {
    tests testJar
}

task generateEnversStaticMetamodel(
        type: JavaCompile,
        description: "Generate the Hibernate Envers revision entity static metamodel classes." ) {
    source = sourceSets.main.java
    // we only want to include these specific classes for metamodel generation.
    // if envers adds any additional revision entity classes, they must be listed here.
    include 'org/hibernate/envers/DefaultRevisionEntity.java'
    include 'org/hibernate/envers/DefaultTrackingModifiedEntitiesRevisionEntity.java'
    include 'org/hibernate/envers/enhanced/SequenceIdRevisionEntity.java'
    include 'org/hibernate/envers/enhanced/SequenceIdTrackingModifiedEntitiesRevisionEntity.java'

    classpath = sourceSets.main.runtimeClasspath + sourceSets.test.compileClasspath
    options.compilerArgs = [
            "-proc:only",
            "-processor",
            "org.hibernate.processor.HibernateProcessor"
    ]

    // put static metamodel classes back out to the source tree since they're version controlled.
    destinationDirectory = new File( "${projectDir}/src/main/java" )
}

tasks.withType( Test.class ).each { test ->
    test.systemProperty 'file.encoding', 'utf-8'
    // Allow creating a function in HSQLDB for this Java method
    test.systemProperty 'hsqldb.method_class_names', 'org.hibernate.orm.test.jpa.transaction.TransactionTimeoutTest.sleep'

    // See org.hibernate.boot.model.naming.NamingHelperTest.DefaultCharset.set
    test.jvmArgs( ['--add-opens', 'java.base/java.nio.charset=ALL-UNNAMED'] )
    // Weld needs this to generate proxies
    test.jvmArgs( ['--add-opens', 'java.base/java.security=ALL-UNNAMED'] )
    test.jvmArgs( ['--add-opens', 'java.base/java.lang=ALL-UNNAMED'] )

    //Avoid Log4J2 classloader leaks:
    test.jvmArgs( ['-Dlog4j2.disableJmx=true'] )

    test.beforeTest { descriptor ->
        //println "Starting test: " + descriptor
    }
    if ( project.db == "h2" || project.db == "hsqldb" || project.db == "derby" ) {
        // Parallel test runs when running with in-memory databases
        test.maxParallelForks = Runtime.runtime.availableProcessors().intdiv( 2 ) ?: 1
    }
}

// Tests with records
if ( jdkVersions.test.release.asInt() >= 17 && jdkVersions.explicit ) {

    // Add a new source set, which contains tests that can run on JDK17+
    sourceSets {
        testJava17 {
            java {
                srcDirs = ['src/test/java17']
            }
            // Refer to the main test resources to avoid processing variables twice
            resources {
                srcDirs tasks.processTestResources
            }
        }
    }

    // For the new source set, we need to configure the source and target version to 17
    compileTestJava17Java {
        javaCompiler = javaToolchains.compilerFor {
            languageVersion = jdkVersions.test.compiler
        }
        sourceCompatibility = 17
        targetCompatibility = 17
        // We also depend on the main test resources
        dependsOn( tasks.processTestResources )
    }

    // The source set gets a custom configuration which extends the normal test implementation config
    configurations {
        testJava17Implementation.extendsFrom(testImplementation, testRuntimeOnly)
        testJava17CompileOnly.extendsFrom(testCompileOnly)
    }

    // Add the output from src/main/java as dependency
    dependencies {
        testJava17Implementation files(sourceSets.main.output.classesDirs) {
            builtBy compileJava
        }
    }

    // We execute the Java 17 tests in a custom test task
    task testJava17(type: Test) {
        javaLauncher = javaToolchains.launcherFor {
            languageVersion = jdkVersions.test.launcher
        }
        useJUnitPlatform()
        testClassesDirs = sourceSets.testJava17.output.classesDirs
        classpath = sourceSets.testJava17.runtimeClasspath
    }

    testClasses.dependsOn compileTestJava17Java
    // And run this as part of the check task by default
    check.dependsOn testJava17
}

tasks.named( "javadoc", Javadoc ) {
    configure(options) {
        overview = rootProject.file( "shared/javadoc/overview.html" )
    }
}

tasks.sourcesJar.dependsOn ':hibernate-core:generateGraphParser'
tasks.sourcesJar.dependsOn ':hibernate-core:generateHqlParser'
tasks.sourcesJar.dependsOn ':hibernate-core:generateSqlScriptParser'
tasks.sourcesJar.dependsOn ':hibernate-core:generateOrderingParser'
