/*
 * Hibernate, Relational Persistence for Idiomatic Java
 *
 * License: GNU Lesser General Public License (LGPL), version 2.1 or later.
 * See the lgpl.txt file in the root directory or <http://www.gnu.org/licenses/lgpl-2.1.html>.
 */
// HIBERNATE 6.1
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'org.hibernate.build.xjc-jakarta'
}

description = 'Hibernate\'s core ORM functionality'

apply from: rootProject.file( 'gradle/published-java-module.gradle' )
apply plugin: 'org.hibernate.orm.antlr'
apply plugin: 'org.hibernate.matrix-test'


configurations {
    tests {
        description = 'Configuration for the produced test jar'
    }
}

// BEGIN: For NUODB - search local repo also
repositories {
	mavenCentral()
    mavenLocal()
}

// --------------------------------------------------------------------- //
// -         Control which tests are included or excluded 6.2          - //
// --------------------------------------------------------------------- //
test {
    filter {

        // ---------------------------------------------------------------------
        // Failing tests that need fixing?
        // ---------------------------------------------------------------------
        excludeTestsMatching 'org.hibernate.orm.test.filter.FilterParameterTests.testNumericMismatch'  // Expected exception, but not thrown
        excludeTestsMatching 'org.hibernate.orm.test.filter.FilterParameterTests.testYesNoMismatch'   // Expected exception, but not thrown

        // Not sure what this should be showing
        excludeTestsMatching 'CriteriaLiteralWithSingleQuoteTest.testLiteralProjectionAndGroupBy'

        // Timezones and timestamps. Several of these fail even though expected and actual match
        // - dates are out by 6-52 minutes.
        // These also fail because the connection time zone is not being set. JDBC driver error?
        excludeTestsMatching 'org.hibernate.orm.test.type.JdbcDateJavaTypeDescriptorTest'
        excludeTestsMatching 'org.hibernate.orm.test.type.Java8DateTimeTests'
        excludeTestsMatching 'org.hibernate.orm.test.type.LocalDateTest'
        excludeTestsMatching 'org.hibernate.orm.test.type.LocalDateTimeTest'
        excludeTestsMatching 'org.hibernate.orm.test.type.LocalTimeTest'
        excludeTestsMatching 'org.hibernate.orm.test.type.OffsetDateTimeTest'
        excludeTestsMatching 'org.hibernate.orm.test.type.OffsetTimeTest'
        excludeTestsMatching 'org.hibernate.orm.test.type.InstantTest'
        excludeTestsMatching 'org.hibernate.orm.test.type.TimeAndTimestampTest'

        // Leaks connections
        excludeTestsMatching 'org.hibernate.orm.test.type.ZonedDateTimeTest'

        // includeTestsMatching 'org.hibernate.orm.test.type.LocalDateTest.nativeWriteThenRead'
        // includeTestsMatching 'org.hibernate.orm.test.type.LocalDateTest.writeThenNativeRead'
        // includeTestsMatching 'org.hibernate.orm.test.type.LocalDateTest.nativeWriteThenRead'
        // includeTestsMatching 'org.hibernate.orm.test.type.LocalDateTest.writeThenRead'

        // Timezone not picked up from Hibernate
        excludeTestsMatching 'org.hibernate.orm.test.timestamp.JdbcTimeCustomTimeZoneTest.testTimeZone'
        excludeTestsMatching 'org.hibernate.orm.test.timestamp.JdbcTimestampCustomSessionLevelTimeZoneTest.testTimeZone'
        excludeTestsMatching 'org.hibernate.orm.test.timestamp.JdbcTimestampCustomTimeZoneTest.testTimeZone'

        // Illegal null in column HIB_SESS_ID - note these are in 2 different packages
		excludeTestsMatching 'InsertSelectTests.simpleTest'
		excludeTestsMatching 'InsertSelectTests.testInsertSelectDistinct'
		excludeTestsMatching 'InsertSelectTests.testInsertSelectGroupBy'

        // Missing table
        excludeTestsMatching 'TypeParameterTest.testLoading'
		excludeTestsMatching 'TypeParameterTest.testSave'

        // Sequence failing
        excludeTestsMatching 'org.hibernate.orm.test.schemaupdate.idgenerator.SequenceGeneratorIncrementTest.*'
		excludeTestsMatching 'SequenceInformationTest.test'
		excludeTestsMatching 'SequenceGeneratorTest.testStartOfSequence'
        excludeTestsMatching 'SequenceInformationTest.test'
        excludeTestsMatching 'SequenceStyleGeneratorBehavesLikeSequeceHiloGeneratorWitZeroIncrementSizeTest.testHiLoAlgorithm'
        excludeTestsMatching 'SequenceNamingStrategyTest.testGeneratorWithSequenceNameHibernateSequenceStrategy'
        excludeTestsMatching 'SequenceNamingStrategyTest.testGeneratorWithSequenceNamePreferGeneratorNameStrategy'
        excludeTestsMatching 'SequenceNamingStrategyTest.testGeneratorWithSequenceNameStandardStrategy'
        excludeTestsMatching 'SequenceNamingStrategyTest.testGeneratorWithoutSequenceNameHibernateSequenceStrategy'
        excludeTestsMatching 'SequenceNamingStrategyTest.testGeneratorWithoutSequenceNamePreferGeneratorNameStrategy'
        excludeTestsMatching 'SequenceNamingStrategyTest.testGeneratorWithoutSequenceNameStandardStrategy'
        excludeTestsMatching 'SequenceNamingStrategyTest.testNoGeneratorStandardStrategy'
        excludeTestsMatching 'SequenceNamingStrategyTest.testSequenceNameStandardStrategy'
        excludeTestsMatching 'SequenceMismatchStrategyFixWithSequenceGeneratorTest.test'
        excludeTestsMatching 'org.hibernate.orm.test.id.sequence.NegativeValueSequenceTest.testNegativeOneAllocationSizeNoopOptimizer'
        excludeTestsMatching 'org.hibernate.orm.test.id.sequence.NegativeValueSequenceTest.testNegativeTwoAllocationSizeNoopOptimizer'
        excludeTestsMatching 'org.hibernate.orm.test.id.sequence.SequenceExportTest'
        excludeTestsMatching 'org.hibernate.orm.test.id.sequence.SequenceExportTest'

        // Contraint errors
		excludeTestsMatching 'SchemaUpdateTest.testSchemaUpdateAndValidation' // Our contraint names are case sensitive

        // Contrived LIKE patterns fail (3 tests)
        excludeTestsMatching 'LikeEscapeDefaultTest'

		excludeTestsMatching 'org.hibernate.orm.test.jpa.criteria.CriteriaQualifiedJoinTest'

        // Error: There is no PreparedStatement for this SQL statement: update AnEntity set name='abc'
        // Works in 6.6
		excludeTestsMatching 'QueryTimeOutTest.testCreateQuerySetTimeout'
		excludeTestsMatching 'QueryTimeOutTest.testCreateQuerySetTimeoutHint'

        // Returned no results, 1 expected
		excludeTestsMatching 'CriteriaMultiselectGroupByAndOrderByTest.testCriteriaGroupByAndOrderByAndHaving'

		excludeTestsMatching 'org.hibernate.orm.test.query.hql.HqlUnionTest' // ???

        // Contraint errors
        excludeTestsMatching 'UniqueConstraintDropTest.testUniqueConstraintIsDropped'  // not dropped

        // --------------------------------------------
        // Tests to skip due to known NuoDB limitations
        // --------------------------------------------

        // Require NuoDB V7
        if (nuodbDatabaseVersion < 7) {
            excludeTestsMatching 'org.hibernate.orm.test.join.OuterJoinTest'
            excludeTestsMatching 'org.hibernate.orm.test.mapping.inheritance.joined.JoinedSubclassTest.testJoinedSubclass'
            excludeTestsMatching 'org.hibernate.orm.test.jpa.ql.TreatKeywordTest.testFilteringJoinedSubclasses'
        }

        // Functions or behaviours NuoDB doesn't support
        excludeTestsMatching 'NamedQueryCommentTest' // our query hints go after select/update not before
		excludeTestsMatching 'NullPrecedenceTest.testNullPrecedence'  // NuoDB does not support NULL precedence
        excludeTestsMatching 'HQLTest.test_hql_cte_materialized_example' // WITH (a, b) is illegal syntax
        excludeTestsMatching 'HQLTest.test_hql_derived_join_example' // LEFT OUTER JOIN requires ON clause - use 6.6 emulation?
		excludeTestsMatching 'SQLExceptionConversionTest.testIntegrityViolation'  // No integrity checking in NuoDB
        excludeTestsMatching 'org.hibernate.orm.test.query.SubQueryInFrom*'  // Predicate 1 is not a boolean operation
		excludeTestsMatching 'CteTests.testSubquery'  // emulation -> unsupported SQL construct
		excludeTestsMatching 'org.hibernate.orm.test.join.OuterJoinTest.testJoinOrderWithRightJoinWithInnerImplicitJoins' // Dependent RIGHT OUTER JOIN
        excludeTestsMatching 'org.hibernate.orm.test.temporal.TimePropertyTest'  // Can't use a DATE as a TIME

        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testAggregateIndicesElementsWithPath' // NoReult No result found for query [select max(indices(eol.listOfNumbers)) from EntityOfLists eol] 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testCastFunction' // NuoDB doesn't automatically truncate. No result found for query [select cast(e.theBoolean as String) from EntityOfBasics e] 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testDurationArithmeticWithLiterals' // Expected: <PT120H> but was: <null> 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testDurationSubtractionWithDatetimeLiterals' // Expected: <PT840H> but was: <null> 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testDurationBy' // No result found for query [select e.theDuration from EntityOfBasics e] 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testDurationLiterals' //  No result found for query [select e.theDuration from EntityOfBasics e] 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testExtractFunctionWeek'  // WEEK not implemented
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testExtractFunctionWithAssertions' // IndexOutOfBounds Index 0 out of bounds for length 0 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testHyperbolic' // No result found for query [select sinh(e.theDouble) from EntityOfBasics e] 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testImplicitCollectionJoinInSelects' // Expected: (a collection containing <0> and a collection containing <1>)  but: a collection containing <0> 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testImplicitCollectionJoinInWhere' // No result found for query [from EntityOfLists eol join eol.listOfOneToMany se where element(se).someLong=5] 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testMathFunctions' // SQLGrammar exception executing SQL [select power(2.71828182845904523536028747135266249775724709369995E0,eob1_0.the_double),ln((eob1_0.the_double+1)),log(10,(eob1_0.the_double+2)) from EntityOfBasics eob1_0] [can't find function "LN"] [n/a] 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testIntervalDiffExpressions'  // Scaling microseconds up and down to nanos overflows BIGINT
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testMaxindexMaxelement' // NoResult No result found for query [select maxindex(eol.listOfBasics) from EntityOfLists eol] 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testMedian'  // median() not supported
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.FunctionTests.testOverlayFunction' // IndexOutOfBounds Index 0 out of bounds for length 0 

        excludeTestsMatching 'org.hibernate.orm.test.query.criteria.CriteriaBuilderNonStandardFunctionsTest.testLog' // LOG() not supported

        excludeTestsMatching 'org.hibernate.orm.test.query.hql.StandardFunctionTests.testLog' // ln() not implemented
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.StandardFunctionTests.testMathFunctions' // ln() not implemented
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.StandardFunctionTests.testExtractFunction' // WEEK not implemented
		excludeTestsMatching 'org.hibernate.orm.test.query.hql.StandardFunctionTests.testExtractFunctionWithAssertions' // WEEK not implemented
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.StandardFunctionTests.testIntervalDiffExpressions'  // Scaling microseconds up and down to nanos overflows BIGINT

        // We do not support pooled sequences as Hibernate expects to use them, and the start and
        // increment info is not available anyway
		excludeTestsMatching 'SequenceInformationTest.test'
        excludeTestsMatching 'org.hibernate.orm.test.schemaupdate.idbag.IdBagSequenceTest'

        // Tests to check Hibernate resolver can find a dummy test Dialect, but we have hard-wired tests to use NuoDB
        excludeTestsMatching 'org.hibernate.orm.test.dialect.resolver.DiscoveredDialectResolverTests'

        // Sub-select alias with parameters "(SELECT ...) alias(a, b)" not supported
        // Try to use 6.6 emulation?
        excludeTestsMatching 'HQLTest.test_hql_derived_root_example' // Multi-valued alias d1_0(owner_id,payed) 
		excludeTestsMatching 'CteTests.testBasic'
		excludeTestsMatching 'CteTests.testBasicJoined'
		excludeTestsMatching 'CteTests.testMaterialized'
		excludeTestsMatching 'CteTests.testNested'
		excludeTestsMatching 'FunctionsWithAnonymousTupleTest'
		excludeTestsMatching 'org.hibernate.orm.test.hql.NestedSubqueryTest.testNestedHqlSubQueries*'
		excludeTestsMatching 'CriteriaMultiselectGroupByAndOrderByTest.testSubqueryGroupBy'
		excludeTestsMatching 'CriteriaMultiselectGroupByAndOrderByTest.testSubqueryGroupByAndOrderBy'
		excludeTestsMatching 'CriteriaMultiselectGroupByAndOrderByTest.testSubqueryGroupByAndOrderByAndHaving'

        // sign() function in @Formaula annotation is used as-is - the registered emulation is ignored
        excludeTestsMatching 'FormulaWithPartitionByTest'

        // NuoDB does not take read locks
        excludeTestsMatching 'LockTest.testUpdateWithPessimisticReadLockSkipLocked'  
    	excludeTestsMatching 'FollowOnLockingTest.testQueryLockingWithFollowOn'
    	excludeTestsMatching 'FollowOnLockingTest.testQueryLockingWithoutFollowOn'

        // CASCADE DELETE not supported
        excludeTestsMatching 'ManyToManyBidirectionalTest.testRemoveMappedBySide'
    	excludeTestsMatching 'ToOneOnDeleteTest.testManyToOne'

        // Subqueries in ORDER BY clause
        excludeTestsMatching 'org.hibernate.orm.test.hql.size.filter.WhereAnnotatedOneToManySizeTest.orderBy_sizeOf'
        excludeTestsMatching 'org.hibernate.orm.test.hql.size.filter.WhereAnnotatedOneToManySizeTest.orderBy_sizeOf'
		excludeTestsMatching 'SubqueryOperatorsTest.testSubqueryInVariousClauses'

        // NuoDB does not use Catalogs
        excludeTestsMatching 'org.hibernate.orm.test.boot.database.qualfiedTableNaming.DefaultCatalogAndSchemaTest'

        // JIRA DB-37128: NuoDB Byte cannot be set to a negative value using a PreparedStatement
        excludeTestsMatching 'ByteTest.testByteDataPersistenceAndRetrieval'

        // JIRA DB-40459: Problem with atan2
        excludeTestsMatching 'CriteriaBuilderNonStandardFunctionsTest.testAtan2'

        // JIRA DB-40458: CASE statement weridness cast(? AS VARCHAR (2147483647))
		excludeTestsMatching 'CaseStatementTest.testSearchedCaseStatementWithAllParamResults'

        // JIRA DB-40465: Can't create table with HELPER_TYPE column
		excludeTestsMatching 'IdClassPredicateTest.testCountIdClassAttributes'
		excludeTestsMatching 'IdClassPredicateTest.testDeclaredIdClassAttributes'
		excludeTestsMatching 'IdClassPredicateTest.testSupertypeIdClassAttributes'

        // IS [NOT] DISTINCT FROM not supported
        excludeTestsMatching 'org.hibernate.orm.test.bootstrap.binding.annotations.embedded.EmbeddedTest.testQueryWithEmbeddedParameterOneNull'
        excludeTestsMatching 'org.hibernate.orm.test.bootstrap.binding.annotations.embedded.EmbeddedTest.testQueryWithEmbeddedParameterAllNull' 
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.DistinctFromTest.testNotDistinctFromNullParam'
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.DistinctFromTest.testNotDistinctFromStringParam'
        excludeTestsMatching 'org.hibernate.orm.test.type.VarbinaryArrayTest'
        excludeTestsMatching 'org.hibernate.orm.test.type.BooleanArrayTest.testQuery'
        excludeTestsMatching 'org.hibernate.orm.test.type.DateArrayTest.testQuery'
        excludeTestsMatching 'org.hibernate.orm.test.type.DoubleArrayTest.testQuery'
        excludeTestsMatching 'org.hibernate.orm.test.type.EnumArrayTest.testQuery'
        excludeTestsMatching 'org.hibernate.orm.test.type.EnumSetConverterTest.testQuery'
        excludeTestsMatching 'org.hibernate.orm.test.type.EnumSetTest.testQuery'
        excludeTestsMatching 'org.hibernate.orm.test.type.FloatArrayTest.testQuery'
        excludeTestsMatching 'org.hibernate.orm.test.type.IntegerArrayTest.testQuery'
        excludeTestsMatching 'org.hibernate.orm.test.type.LongArrayTest.testQuery'
        excludeTestsMatching 'org.hibernate.orm.test.type.ShortArrayTest.testQuery'
        excludeTestsMatching 'org.hibernate.orm.test.type.TimeArrayTest.testQuery'
        excludeTestsMatching 'org.hibernate.orm.test.type.TimestampArrayTest.testQuery'
		excludeTestsMatching 'org.hibernate.orm.test.query.hql.DistinctFromTest'
        excludeTestsMatching 'org.hibernate.orm.test.type.BasicListTest.testQuery'
        excludeTestsMatching 'org.hibernate.orm.test.type.BasicListTest.testQueryById'
        excludeTestsMatching 'org.hibernate.orm.test.type.BasicSortedSetTest.testQuery'
        excludeTestsMatching 'org.hibernate.orm.test.type.BasicSortedSetTest.testQueryById'

        // ResultSet is forward-only
        excludeTestsMatching 'org.hibernate.orm.test.hql.ScrollableCollectionFetchingTest.testScrollingJoinFetchesEmptyResultSet'
        excludeTestsMatching 'org.hibernate.orm.test.hql.ScrollableCollectionFetchingTest.testScrollingJoinFetchesPositioning'
        excludeTestsMatching 'org.hibernate.orm.test.hql.ScrollableCollectionFetchingTest.testScrollingJoinFetchesReverse'
        excludeTestsMatching 'org.hibernate.orm.test.hql.ScrollableCollectionFetchingTest.testScrollingJoinFetchesSingleRowResultSet'
        excludeTestsMatching 'org.hibernate.orm.test.jpa.criteria.fetchscroll.CriteriaToScrollableResultsFetchTest.testWithScroll'
        excludeTestsMatching 'org.hibernate.orm.test.resulttransformer.ResultTransformerTest'

        // ResultSets are not scrollable
        excludeTestsMatching 'org.hibernate.orm.test.query.returns.ScrollableResultsTests'

        // Type implementation mismatches
        excludeTestsMatching 'org.hibernate.orm.test.jpa.query.NativeQueryResultTypeAutoDiscoveryTest.tinyintType'  // No support for the tinyint datatype so we use smallint
        excludeTestsMatching 'org.hibernate.orm.test.jpa.query.NativeQueryResultTypeAutoDiscoveryTest.floatType'  // Stores all floating point numbers as double, never returns a float
        excludeTestsMatching 'org.hibernate.orm.test.jpa.query.NativeQueryResultTypeAutoDiscoveryTest.realType'  // Stores all floating point numbers as double, never returns a float
        excludeTestsMatching 'org.hibernate.orm.test.jpa.query.NativeQueryResultTypeAutoDiscoveryTest.numericType'  // Value is too big for the maximum allowed precision of NuoDB
        excludeTestsMatching 'org.hibernate.orm.test.jpa.query.NativeQueryResultTypeAutoDiscoveryTest.decimalType'  // Value is too big for the maximum allowed precision of NuoDB
        excludeTestsMatching 'org.hibernate.orm.test.jpa.query.NativeQueryResultTypeAutoDiscoveryTest.binaryTypes'  // NuoDB maps BINARY and VARBINARY to BLOB
        excludeTestsMatching 'org.hibernate.orm.test.jpa.query.NativeQueryResultTypeAutoDiscoveryTest.longBinaryType'  // NuoDB maps LONGVARCHAR to BLOB

        // ALL not supported
        excludeTestsMatching 'org.hibernate.orm.test.hql.HQLTest.test_hql_collection_expressions_example_8'
        excludeTestsMatching 'org.hibernate.orm.test.hql.HQLTest.test_hql_all_subquery_comparison_qualifier_example'
 		excludeTestsMatching 'org.hibernate.orm.test.query.criteria.SubQueryTests.modifiedSubQueryHqlTest'
		excludeTestsMatching 'org.hibernate.orm.test.query.criteria.SubQueryTests.modifiedSubQueryTest'
        excludeTestsMatching 'org.hibernate.orm.test.jpa.criteria.subquery.UncorrelatedSubqueryTest.testEqualAll'
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.SubqueryOperatorsTest.testEvery'

        // any(sub-select) not supported
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.SubqueryOperatorsTest.testAny'

        // ???
        excludeTestsMatching 'org.hibernate.orm.test.query.hql.set.SetOperationTest.testAlternatingSetOperator' // No such element exception

    }
}
// END: For NUODB

dependencies {
    api jakartaLibs.jpa
    api jakartaLibs.jta

    implementation libs.hcann
    implementation libs.jandex
    implementation libs.classmate
    implementation libs.byteBuddy

    implementation jakartaLibs.jaxbApi
    implementation jakartaLibs.jaxb
    implementation jakartaLibs.inject

    implementation libs.antlrRuntime

    compileOnly jakartaLibs.jacc
    compileOnly jakartaLibs.validation
    compileOnly jakartaLibs.cdi
    compileOnly jakartaLibs.jsonbApi
    compileOnly libs.jackson
    compileOnly libs.jacksonXml

    testImplementation project(':hibernate-testing')
    testImplementation project(':hibernate-ant')
    testImplementation testLibs.shrinkwrapApi
    testImplementation testLibs.shrinkwrap
    testImplementation testLibs.shrinkwrapDescriptors
    testImplementation testLibs.shrinkwrapDescriptorsApi
    testImplementation jakartaLibs.cdi
    testImplementation jakartaLibs.jacc
    testImplementation jakartaLibs.validation
    testImplementation jakartaLibs.el
    testImplementation( libs.validator ) {
        // for test runtime
        transitive = true
    }
    testImplementation "joda-time:joda-time:2.3"

    testRuntimeOnly libs.byteBuddy
    testRuntimeOnly testLibs.weld
    testRuntimeOnly testLibs.wildFlyTxnClient
    testRuntimeOnly libs.jackson

    testAnnotationProcessor project( ':hibernate-jpamodelgen' )

    // NOTE: it seems like, since 4.10, the Antlr Tool no longer defines
    // transitive dep on the corresponding Antlr Runtime.  At least, I get
    // errors about mismatched versions if I do not include the runtime
    // dependency here.
    antlr libs.antlr
    antlr libs.antlrRuntime

    xjc jakartaLibs.xjc
    xjc jakartaLibs.jaxb
    xjc rootProject.fileTree(dir: 'patched-libs/jaxb2-basics', include: '*.jar')
}

jar {
    manifest {
        attributes(
                'Main-Class': 'org.hibernate.Version'
        )
    }
}

ext {
    jaxbTargetDir = project.file( "${buildDir}/generated/sources/xjc/main" )
}

sourceSets {
    main {
        // add the XJC generated JAXB classes to the main source-set
        java{
            srcDir project.jaxbTargetDir
        }
    }

    // resources inherently exclude sources
    test {
        resources {
            srcDir 'src/test/java'
            srcDir 'src/test/resources'
            srcDir 'src/test/bundles'
        }
    }
}

xjc {
    outputDirectory = project.jaxbTargetDir

    schemas {
        cfg {
            xsdFile = 'src/main/resources/org/hibernate/xsd/cfg/legacy-configuration-4.0.xsd'
            xjcBindingFile = 'src/main/xjb/hbm-configuration-bindings.xjb'
        }
        hbm {
            xsdFile = file( 'src/main/resources/org/hibernate/xsd/mapping/legacy-mapping-4.0.xsd' )
            xjcBindingFile = file( 'src/main/xjb/hbm-mapping-bindings.xjb' )
            xjcExtensions += ['inheritance', 'simplify']
        }
        mapping {
            xsdFile = file( 'src/main/resources/org/hibernate/xsd/mapping/mapping-3.1.0.xsd' )
            xjcBindingFile = file( 'src/main/xjb/mapping-bindings.xjb' )
            xjcExtensions += ['inheritance', 'simplify']
        }
    }
}

task copyBundleResourcesXml (type: Copy) {
    inputs.property( "db", db )
    inputs.property( "dbHost", dbHost )
    ext {
        bundlesTargetDir = file( "${buildDir}/bundles" )
        // Escape
        bundleTokens = [
                'db.dialect' : dbBundle[db]['db.dialect'].replace("&", "&amp;"),
                'jdbc.driver' : dbBundle[db]['jdbc.driver'].replace("&", "&amp;"),
                'jdbc.user' : dbBundle[db]['jdbc.user'].replace("&", "&amp;"),
                'jdbc.pass' : dbBundle[db]['jdbc.pass'].replace("&", "&amp;"),
                'jdbc.url' : dbBundle[db]['jdbc.url'].replace("&", "&amp;"),
                'connection.init_sql' : dbBundle[db]['connection.init_sql'].replace("&", "&amp;")
        ]
        ext.bundleTokens['buildDirName'] = project.relativePath( buildDir )
    }

    from('src/test/bundles/templates') {
        include '**/*.xml'
    }
    into ext.bundlesTargetDir
    filter( ReplaceTokens, tokens: ext.bundleTokens)

    doFirst {
        ext.bundlesTargetDir.mkdirs()
    }
}

task copyBundleResourcesNonXml (type: Copy) {
    inputs.property( "db", db )
    ext {
        bundlesTargetDir = file( "${buildDir}/bundles" )
        // Escape
        bundleTokens = dbBundle[db]
        ext.bundleTokens['buildDirName'] = project.relativePath( buildDir )
    }

    from('src/test/bundles/templates') {
        exclude '**/*.xml'
    }
    into ext.bundlesTargetDir
    filter( ReplaceTokens, tokens: ext.bundleTokens)

    doFirst {
        ext.bundlesTargetDir.mkdirs()
    }
}

task copyBundleResources (type: Copy) {
    inputs.property( "db", db )
    dependsOn tasks.copyBundleResourcesXml
    dependsOn tasks.copyBundleResourcesNonXml
}

processTestResources {
    dependsOn copyBundleResources
    duplicatesStrategy = DuplicatesStrategy.WARN
}

sourcesJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

}

task testJar(type: Jar, dependsOn: testClasses) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveClassifier.set( 'test' )
    from sourceSets.test.output
}

artifacts {
    tests testJar
}

task generateEnversStaticMetamodel(
        type: JavaCompile,
        description: "Generate the Hibernate Envers revision entity static metamodel classes." ) {
    source = sourceSets.main.java
    // we only want to include these specific classes for metamodel generation.
    // if envers adds any additional revision entity classes, they must be listed here.
    include 'org/hibernate/envers/DefaultRevisionEntity.java'
    include 'org/hibernate/envers/DefaultTrackingModifiedEntitiesRevisionEntity.java'
    include 'org/hibernate/envers/enhanced/SequenceIdRevisionEntity.java'
    include 'org/hibernate/envers/enhanced/SequenceIdTrackingModifiedEntitiesRevisionEntity.java'

    classpath = sourceSets.main.runtimeClasspath + sourceSets.test.compileClasspath
    options.compilerArgs = [
            "-proc:only",
            "-processor",
            "org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor"
    ]

    // put static metamodel classes back out to the source tree since they're version controlled.
    destinationDirectory = new File( "${projectDir}/src/main/java" )
}

tasks.withType( Test.class ).each { test ->
    test.systemProperty 'file.encoding', 'utf-8'

    // See org.hibernate.boot.model.naming.NamingHelperTest.DefaultCharset.set
    test.jvmArgs( ['--add-opens', 'java.base/java.nio.charset=ALL-UNNAMED'] )
    // Weld needs this to generate proxies
    test.jvmArgs( ['--add-opens', 'java.base/java.security=ALL-UNNAMED'] )
    test.jvmArgs( ['--add-opens', 'java.base/java.lang=ALL-UNNAMED'] )

    test.beforeTest { descriptor ->
        //println "Starting test: " + descriptor
    }

    // Allow to exclude specific tests
    if (project.hasProperty('excludeTests')) {
        test.filter {
            excludeTestsMatching project.property('excludeTests').toString()
        }
    }
}

